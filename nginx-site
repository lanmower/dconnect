<<<<<<< HEAD
=======
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
resolver 127.0.0.53 ipv6=off;
>>>>>>> master
server {
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/dconnect.live/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dconnect.live/privkey.pem; # managed by Certbot
<<<<<<< HEAD

    server_name ~^(.*)\.dconnect\.live$;

     location / {
        proxy_pass http://127.0.0.1:3000/$1/relative$request_uri;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
     }

    location /ws/ {
        proxy_pass http://127.0.0.1:4004/ws/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        client_max_body_size 100M;
=======
    
    server_name ~^(.*)\.dconnect\.live$;

    location /store/ {
        add_header 'Access-Control-Allow-Origin' '*';
        proxy_pass http://127.0.0.1:3000/store/;
        proxy_cache_bypass $http_upgrade;
    }
    
 location / {
	proxy_pass http://127.0.0.1:3000/$1/relative$request_uri;
	proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    location /ipfs/ {
        proxy_pass http://127.0.0.1:8080/ipfs/;
	proxy_cache_bypass $http_upgrade;
>>>>>>> master
     }

    location /v1/ {
        proxy_pass http://127.0.0.1:8888/v1/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
     }

}


server {
    listen 443 ssl default_server; # managed by Certbot
<<<<<<< HEAD

=======
    
>>>>>>> master
    ssl_certificate /etc/letsencrypt/live/dconnect.live-0001/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dconnect.live-0001/privkey.pem; # managed by Certbot
    server_name dconnect.live;
    location / {
        proxy_pass http://127.0.0.1:3000/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
     }

<<<<<<< HEAD
    location /ws/ {
        proxy_pass http://127.0.0.1:4004/ws/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
     }

=======
    location /ipfs/ {
        proxy_pass http://127.0.0.1:8080/ipfs/;
        proxy_cache_bypass $http_upgrade;
     }
>>>>>>> master
    location /v1/ {
        proxy_pass http://127.0.0.1:8888/v1/;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
     }

}

server {
<<<<<<< HEAD
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
}
=======
    listen 4005 ssl default_server; # managed by Certbot

    ssl_certificate /etc/letsencrypt/live/dconnect.live-0001/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/dconnect.live-0001/privkey.pem; # managed by Certbot
    server_name dconnect.live;
    location / {
        proxy_pass http://127.0.0.1:4004;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

}


server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _;
	return 301 https://$host$request_uri;
}
 
>>>>>>> master
